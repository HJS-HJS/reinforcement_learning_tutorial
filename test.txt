import sys
import re
import json 
import os   
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPlainTextEdit,
    QPushButton, QLineEdit, QLabel, QListWidget, QListWidgetItem,
    QCheckBox, QColorDialog, QFileDialog, QMessageBox, QSplitter
)
from PyQt5.QtGui import (
    QColor, QTextCursor, QTextCharFormat, QFont, QSyntaxHighlighter,
    QTextDocument 
)
from PyQt5.QtCore import Qt, QFileInfo

# Highlighter 클래스는 변경 없음 (이전 코드와 동일)
class Highlighter(QSyntaxHighlighter):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.highlight_rules = []

    def set_rules(self, rules_list):
        self.highlight_rules = []
        for rule in rules_list:
            term = rule["term"]
            color = rule["color"]
            is_case_i = rule["is_case_i"]
            
            fmt = QTextCharFormat()
            fmt.setBackground(color)
            
            flags = re.IGNORECASE if is_case_i else 0
            
            try:
                pattern = re.compile(re.escape(term), flags)
                self.highlight_rules.append((pattern, fmt))
            except re.error as e:
                print(f"Error compiling: {term} -> {e}")
        
        self.rehighlight()

    def highlightBlock(self, text):
        line_num_format = QTextCharFormat()
        line_num_format.setForeground(QColor("#888888"))
        self.setFormat(0, 8, line_num_format)

        for pattern, fmt in self.highlight_rules:
            for match in pattern.finditer(text):
                start, end = match.span(0) 
                self.setFormat(start, end - start, fmt)

class LogViewer(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Log Viewer")
        self.resize(1200, 700)
        self.lines = []
        self.highlight_colors = {}
        self.search_results = []
        self.search_index = -1
        self.last_search_term = ""
        self.CONFIG_FILE = "log_viewer_config.json"

        main_layout = QVBoxLayout(self)

        # (상단 파일 레이아웃 변경 없음)
        top_layout = QHBoxLayout()
        self.file_path_box = QLineEdit()
        self.file_path_box.setPlaceholderText("Enter file path...")
        self.file_path_box.setFixedHeight(30)
        self.file_btn = QPushButton("📁")
        self.file_btn.setFixedWidth(30)
        self.file_btn.setFixedHeight(30)
        top_layout.addWidget(self.file_path_box)
        top_layout.addWidget(self.file_btn)
        main_layout.addLayout(top_layout)
        
        splitter = QSplitter(Qt.Horizontal)
        self.log_window = QPlainTextEdit()
        self.log_window.setReadOnly(True)
        self.log_window.setFont(QFont("Courier New", 10))
        self.highlighter = Highlighter(self.log_window.document())
        splitter.addWidget(self.log_window)

        # --- Filter/Highlight UI ---
        fh_widget = QWidget()
        fh_layout = QVBoxLayout(fh_widget)
        splitter.addWidget(fh_widget)

        # (검색 레이아웃 변경 없음)
        search_layout = QHBoxLayout()
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Search...")
        self.search_case_cb = QCheckBox("Case (i)")
        self.search_case_cb.setToolTip("Case Insensitive Search")
        self.search_count_label = QLabel("0/0")
        self.search_count_label.setFixedWidth(60)
        search_layout.addWidget(self.search_box)
        search_layout.addWidget(self.search_case_cb) 
        search_layout.addWidget(self.search_count_label)
        fh_layout.addLayout(search_layout)

        # --- Filter (전역 'Case (i)' 체크박스 제거) ---
        self.filter_box = QLineEdit()
        self.filter_box.setPlaceholderText("Add filter keyword")
        
        # 전역 옵션 레이아웃 제거
        
        self.filter_list = QListWidget()
        self.filter_add_btn = QPushButton("Add Filter")
        fh_layout.addWidget(self.filter_box)
        # fh_layout.addLayout(filter_options_layout) # 제거
        fh_layout.addWidget(self.filter_add_btn)
        fh_layout.addWidget(self.filter_list)

        # --- Highlight (전역 'Case (i)' 체크박스 제거) ---
        self.highlight_box = QLineEdit()
        self.highlight_box.setPlaceholderText("Add highlight keyword")
        
        # 전역 옵션 레이아웃 제거

        self.highlight_list = QListWidget()
        self.highlight_add_btn = QPushButton("Add Highlight")
        fh_layout.addWidget(self.highlight_box)
        # fh_layout.addLayout(hl_options_layout) # 제거
        fh_layout.addWidget(self.highlight_add_btn)
        fh_layout.addWidget(self.highlight_list)

        fh_layout.addStretch() 

        self.export_btn = QPushButton("Export Visible Log")
        fh_layout.addWidget(self.export_btn)
        main_layout.addWidget(splitter)

        # (이벤트 연결 변경 없음)
        self.file_btn.clicked.connect(self.open_file_dialog)
        self.file_path_box.returnPressed.connect(self.load_file_from_path)
        self.search_box.returnPressed.connect(self.highlight_search)
        self.search_box.textChanged.connect(self.on_search_text_changed)
        self.filter_add_btn.clicked.connect(self.add_filter)
        self.highlight_add_btn.clicked.connect(self.add_highlight)
        self.filter_box.returnPressed.connect(self.add_filter)
        self.highlight_box.returnPressed.connect(self.add_highlight)
        self.search_case_cb.stateChanged.connect(self.on_search_options_changed)
        self.export_btn.clicked.connect(self.export_log)

        self.set_dark_mode()
        self.load_settings()

    def closeEvent(self, event):
        self.save_settings()
        event.accept()

    # --- [수정] 설정 저장 ---
    def save_settings(self):
        filters = []
        for i in range(self.filter_list.count()):
            item = self.filter_list.item(i)
            widget = self.filter_list.itemWidget(item)
            data = item.data(Qt.UserRole) # data = {"term": "..."}
            if data:
                # 위젯에서 'i' 체크박스의 현재 상태를 읽어옴
                case_cb = widget.findChild(QCheckBox, "case_i_cb")
                is_case_i = case_cb.isChecked() if case_cb else False
                data["is_case_i"] = is_case_i # data에 상태 추가
                filters.append(data)
        
        highlights = []
        for i in range(self.highlight_list.count()):
            item = self.highlight_list.item(i)
            widget = self.highlight_list.itemWidget(item)
            data = item.data(Qt.UserRole)
            if data:
                case_cb = widget.findChild(QCheckBox, "case_i_cb")
                is_case_i = case_cb.isChecked() if case_cb else False
                data["is_case_i"] = is_case_i
                
                color_hex = self.highlight_colors.get(data["term"], QColor("#ffff00")).name()
                data["color"] = color_hex
                highlights.append(data)
        
        data_to_save = {"filters": filters, "highlights": highlights}
        
        try:
            with open(self.CONFIG_FILE, "w") as f:
                json.dump(data_to_save, f, indent=4)
        except Exception as e:
            print(f"Error saving config: {e}")

    # --- [수정] 설정 불러오기 ---
    def load_settings(self):
        if not os.path.exists(self.CONFIG_FILE):
            return
        
        try:
            with open(self.CONFIG_FILE, "r") as f:
                data = json.load(f)
            
            filters = data.get("filters", [])
            highlights = data.get("highlights", []) 

            for f_data in filters:
                term = f_data.get("term")
                if not term or self.find_filter_item(term):
                    continue
                is_case_i = f_data.get("is_case_i", False)
                
                # 1. 아이템 추가 (is_case_i 파라미터 없음)
                self.add_filter_item(term, checked=True)
                
                # 2. 방금 추가된 아이템(index 0)의 위젯을 가져와서
                #    'i' 체크박스 상태를 설정
                item = self.filter_list.item(0)
                widget = self.filter_list.itemWidget(item)
                case_cb = widget.findChild(QCheckBox, "case_i_cb")
                if case_cb:
                    case_cb.setChecked(is_case_i)
            
            for h_data in highlights:
                term = h_data.get("term")
                color = h_data.get("color", "#ffff00")
                if not term or self.find_highlight_item(term):
                    continue
                is_case_i = h_data.get("is_case_i", False)
                
                # 1. 아이템 추가
                self.add_highlight_item(term, color, checked=True)
                
                # 2. 'i' 체크박스 상태 설정
                item = self.highlight_list.item(0)
                widget = self.highlight_list.itemWidget(item)
                case_cb = widget.findChild(QCheckBox, "case_i_cb")
                if case_cb:
                    case_cb.setChecked(is_case_i)
            
            if filters or highlights:
                self.display_log()
        except Exception as e:
            QMessageBox.warning(self, "Config Error", f"Failed to load config file:\n{e}")

    # (find_filter/highlight_item, set_dark_mode, 파일 열기 함수들 변경 없음)
    def find_filter_item(self, term):
        for i in range(self.filter_list.count()):
            item = self.filter_list.item(i)
            data = item.data(Qt.UserRole)
            if data and data.get("term") == term:
                return item
        return None

    def find_highlight_item(self, term):
        for i in range(self.highlight_list.count()):
            item = self.highlight_list.item(i)
            data = item.data(Qt.UserRole)
            if data and data.get("term") == term:
                return item
        return None

    def set_dark_mode(self):
        self.setStyleSheet("""
        QWidget { background-color: #1e1e1e; color: #e0e0e0; }
        QLineEdit, QListWidget, QPlainTextEdit {
            background-color: #2b2b2b; border: 1px solid #444; border-radius: 6px; padding: 4px;
        }
        QPushButton { background-color: #3a3a3a; border: 1px solid #555; border-radius: 6px; padding: 5px; }
        QPushButton:hover { background-color: #505050; }
        QCheckBox { margin: 2px; }
        QCheckBox::indicator { width: 16px; height: 16px; background-color: #3a3a3a; border: 1px solid #777; }
        QCheckBox::indicator:checked { background-color: #888; }
        /* 'i' 체크박스만 작게 만들기 */
        QCheckBox[objectName="case_i_cb"] { font-size: 9pt; }
        QCheckBox[objectName="case_i_cb"]::indicator { width: 12px; height: 12px; }
        QScrollBar:vertical { background: #1e1e1e; width: 12px; }
        QScrollBar::handle:vertical { background: #e0e0e0; }
        """)

    def open_file_dialog(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select Log File", "", "All Files (*.*);;Text Files (*.txt)")
        if file_path:
            self.file_path_box.setText(file_path)
            self.load_log_file(file_path)

    def load_file_from_path(self):
        path = self.file_path_box.text().strip()
        file_info = QFileInfo(path)
        if file_info.exists() and file_info.isFile():
            self.load_log_file(path)

    def load_log_file(self, path):
        try:
            with open(path, "r", encoding="utf-8", errors='ignore') as f:
                self.lines = f.readlines()
        except Exception as e:
            QMessageBox.warning(self, "Error", f"Failed to load log file:\n{e}")
            return
        self.display_log()

    # --- [수정] display_log ---
    def display_log(self):
        cursor_pos = self.log_window.verticalScrollBar().value()
        
        # 1. Filter 목록 가져오기
        active_filters = []
        for i in range(self.filter_list.count()):
            item = self.filter_list.item(i)
            widget = self.filter_list.itemWidget(item)
            cb = widget.findChild(QCheckBox) # 메인 체크박스
            if cb and cb.isChecked():
                data = item.data(Qt.UserRole) # data = {"term": "..."}
                if data:
                    # 'i' 체크박스 상태를 읽어서 data에 추가
                    case_cb = widget.findChild(QCheckBox, "case_i_cb")
                    data["is_case_i"] = case_cb.isChecked() if case_cb else False
                    active_filters.append(data)
                
        # 2. Highlight 목록 가져오기
        active_highlights = []
        for i in range(self.highlight_list.count()):
            item = self.highlight_list.item(i)
            widget = self.highlight_list.itemWidget(item)
            cb = widget.findChild(QCheckBox) # 메인 체크박스
            if cb and cb.isChecked():
                data = item.data(Qt.UserRole)
                if data:
                    case_cb = widget.findChild(QCheckBox, "case_i_cb")
                    data["is_case_i"] = case_cb.isChecked() if case_cb else False
                    
                    color = self.highlight_colors.get(data["term"], QColor("#ffff00"))
                    data["color"] = color
                    active_highlights.append(data)

        # 3. 필터링 로직 (변경 없음)
        display_lines = []
        for idx, line in enumerate(self.lines, start=1):
            line_text = line.rstrip("\n")
            
            display_line = True
            if active_filters:
                display_line = False 
                for f_data in active_filters:
                    term = f_data["term"]
                    is_case_i = f_data["is_case_i"]
                    
                    if is_case_i:
                        if term.lower() in line_text.lower():
                            display_line = True
                            break
                    else:
                        if term in line_text:
                            display_line = True
                            break
            
            if not display_line:
                continue
                
            line_num = f"{idx:>5}"
            display_lines.append(f"{line_num} | {line_text}")

        # (4, 5, 6, 7 - 텍스트 설정, 서식 클리어, 하이라이트, 검색 초기화 - 변경 없음)
        self.log_window.setPlainText("\n".join(display_lines))
        self.log_window.verticalScrollBar().setValue(cursor_pos)
        
        self._clear_manual_formats()
        self.highlighter.set_rules(active_highlights)

        self.search_results.clear()
        self.search_index = -1
        self.last_search_term = self.search_box.text().strip()
        self.search_count_label.setText("0/0")

    # (re_apply_search, _clear_manual_formats, clear_search_highlights,
    #  highlight_search, on_search_text_changed, on_search_options_changed 
    #  변경 없음 - 이전 코드와 동일)
    def re_apply_search(self):
        term = self.last_search_term
        if not term:
            self.search_count_label.setText("0/0")
            return
        doc = self.log_window.document()
        self.search_results.clear()
        find_flags = QTextDocument.FindFlags()
        if not self.search_case_cb.isChecked():
            find_flags |= QTextDocument.FindCaseSensitively
        cursor = QTextCursor(doc)
        cursor.movePosition(QTextCursor.Start)
        while True:
            found = doc.find(term, cursor, find_flags) 
            if found.isNull():
                break
            self.search_results.append(found)
            cursor = found
        if not self.search_results:
            self.search_index = -1
            self.search_count_label.setText("0/0")
            return
        if self.search_index < 0 or self.search_index >= len(self.search_results):
            self.search_index = 0
        current_cursor = self.search_results[self.search_index]
        fmt = QTextCharFormat()
        fmt.setBackground(QColor("#00ff00")) 
        fmt.setForeground(QColor("#000000")) 
        current_cursor.mergeCharFormat(fmt)
        self.log_window.setTextCursor(current_cursor) 
        self.search_count_label.setText(f"{self.search_index+1}/{len(self.search_results)}")

    def _clear_manual_formats(self):
        null_fmt = QTextCharFormat()
        cursor = QTextCursor(self.log_window.document())
        cursor.select(QTextCursor.Document)
        cursor.setCharFormat(null_fmt)

    def clear_search_highlights(self):
        self._clear_manual_formats()
        self.highlighter.rehighlight() 

    def highlight_search(self):
        term = self.search_box.text().strip()
        if not term:
            self.on_search_text_changed(term)
            return
        if term != self.last_search_term:
            self.last_search_term = term
            self.search_index = 0
            self.clear_search_highlights()
            self.re_apply_search()
        else:
            if not self.search_results:
                self.clear_search_highlights()
                self.re_apply_search()
                return
            self.search_index = (self.search_index + 1) % len(self.search_results)
            self.clear_search_highlights()
            current_cursor = self.search_results[self.search_index]
            fmt = QTextCharFormat()
            fmt.setBackground(QColor("#00ff00"))
            fmt.setForeground(QColor("#000000"))
            current_cursor.mergeCharFormat(fmt)
            self.log_window.setTextCursor(current_cursor)
            self.search_count_label.setText(f"{self.search_index+1}/{len(self.search_results)}")

    def on_search_text_changed(self, text):
        term = text.strip()
        if not term:
            self.search_count_label.setText("0/0")
            self.last_search_term = ""
            self.search_results.clear()
            self.search_index = -1
            self.clear_search_highlights()

    def on_search_options_changed(self):
        term = self.search_box.text().strip()
        if term:
            self.last_search_term = None 
            self.highlight_search()

    # --- [수정] add_filter ---
    def add_filter(self):
        term = self.filter_box.text().strip()
        if not term:
            return
        if self.find_filter_item(term):
            return
            
        # 전역 is_case_i 읽는 로직 제거
        
        self.filter_box.clear()
        
        self.add_filter_item(term) # is_case_i 파라미터 제거
        self.display_log()

    # --- [수정] add_filter_item ---
    def add_filter_item(self, term, checked=True):
        item_widget = QWidget()
        layout = QHBoxLayout(item_widget)
        layout.setContentsMargins(3, 0, 3, 0)
        
        checkbox = QCheckBox(term) # 라벨은 term만
        checkbox.setChecked(checked)
        
        # 'i' 체크박스 추가
        case_cb = QCheckBox("i")
        case_cb.setToolTip("Case Insensitive")
        case_cb.setObjectName("case_i_cb") # 찾기 위한 이름
        case_cb.setFixedWidth(30)
        
        remove_btn = QPushButton("X")
        remove_btn.setFixedWidth(20)
        
        layout.addWidget(checkbox)
        layout.addStretch() # 체크박스를 왼쪽으로 밀착
        layout.addWidget(case_cb) # 'i' 버튼 추가
        layout.addWidget(remove_btn)
        
        list_item = QListWidgetItem()
        
        # data에는 term만 저장
        data = {"term": term}
        list_item.setData(Qt.UserRole, data)
        
        self.filter_list.insertItem(0, list_item)
        self.filter_list.setItemWidget(list_item, item_widget)
        
        remove_btn.clicked.connect(lambda: self.remove_item(self.filter_list, list_item))
        # 두 체크박스 모두 display_log 호출
        checkbox.stateChanged.connect(lambda _: self.display_log())
        case_cb.stateChanged.connect(lambda _: self.display_log())

    # --- [수정] add_highlight ---
    def add_highlight(self):
        term = self.highlight_box.text().strip()
        if not term:
            return
        if self.find_highlight_item(term):
            return
            
        # 전역 is_case_i 읽는 로직 제거
        
        self.highlight_box.clear()
        
        self.add_highlight_item(term, "#ffff00")
        self.display_log()

    # --- [수정] add_highlight_item ---
    def add_highlight_item(self, term, color, checked=True):
        item_widget = QWidget()
        layout = QHBoxLayout(item_widget)
        layout.setContentsMargins(3, 0, 3, 0)
        
        checkbox = QCheckBox(term) # 라벨은 term만
        checkbox.setChecked(checked)
        
        color_btn = QPushButton()
        color_btn.setFixedWidth(30)
        q_color = QColor(color) 
        color_btn.setStyleSheet(f"background-color: {q_color.name()}; border-radius: 3px;")
        
        # 'i' 체크박스 추가
        case_cb = QCheckBox("i")
        case_cb.setToolTip("Case Insensitive")
        case_cb.setObjectName("case_i_cb")
        case_cb.setFixedWidth(30)
        
        remove_btn = QPushButton("X")
        remove_btn.setFixedWidth(20)
        
        layout.addWidget(checkbox)
        layout.addStretch() # 체크박스를 왼쪽으로 밀착
        layout.addWidget(color_btn)
        layout.addWidget(case_cb) # 'i' 버튼 추가
        layout.addWidget(remove_btn)
        
        list_item = QListWidgetItem()
        
        # data에는 term만 저장
        data = {"term": term}
        list_item.setData(Qt.UserRole, data)
        
        self.highlight_list.insertItem(0, list_item)
        self.highlight_list.setItemWidget(list_item, item_widget)
        
        self.highlight_colors[term] = q_color

        def change_color():
            new_color = QColorDialog.getColor(self.highlight_colors[term], self)
            if new_color.isValid():
                self.highlight_colors[term] = new_color
                color_btn.setStyleSheet(f"background-color: {new_color.name()}; border-radius: 3px;")
                self.display_log()

        color_btn.clicked.connect(change_color)
        remove_btn.clicked.connect(lambda: self.remove_item(self.highlight_list, list_item, term))
        # 세 위젯 모두 display_log 호출
        checkbox.stateChanged.connect(lambda _: self.display_log())
        case_cb.stateChanged.connect(lambda _: self.display_log())

    # (remove_item, export_log 변경 없음)
    def remove_item(self, list_widget, list_item, term=None):
        if not term:
             data = list_item.data(Qt.UserRole)
             if data:
                 term = data.get("term")
                 
        list_widget.takeItem(list_widget.row(list_item))
        
        if list_widget == self.highlight_list and term and term in self.highlight_colors:
            del self.highlight_colors[term]
            
        self.display_log()

    def export_log(self):
        path, _ = QFileDialog.getSaveFileName(self, 
            "Export Visible Log", "", "Text Files (*.txt);;All Files (*.*)")
        
        if not path:
            return
            
        try:
            text_to_save = self.log_window.toPlainText()
            with open(path, "w", encoding="utf-8") as f:
                f.write(text_to_save)
        except Exception as e:
            QMessageBox.warning(self, "Export Error", f"Failed to export log:\n{e}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    viewer = LogViewer()
    viewer.show()
    sys.exit(app.exec_())
